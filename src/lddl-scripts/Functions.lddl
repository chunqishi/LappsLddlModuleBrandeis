/*
 * Functions used to register web services and datasources.
 */

void register_datasources(list) {
    list.each {
        register_datasource(it)
    }
}

register_datasource = { s ->
	println "Registering datasource ${s.name}"
	def serviceTypeId = "service.type.${s.id.toLowerCase()}"
    serviceType {
		id serviceTypeId
		name s.name
		domain DOMAIN
		description s.name
		attributes 'service.meta.lang', 'service.meta.type'    
	}
	serviceInterfaceDefinition {
		name "${s.name} Interface"
		domain DOMAIN
		type serviceTypeId
		protocol 'SOAP_RPC_ENCODED'
		url "${s.url}?wsdl"
	}
    service {
        id s.id
        name s.name
        url s.url
        protocol 'SOAP_RPC_ENCODED'
        domain DOMAIN
        type serviceTypeId
        copyright COPYRIGHT
        resource MASC_ID
        license APACHE
        description s.desc
        allow 'commercial', 'nonprofit', 'research'
        control 'client', 'server'
		federate true
        attributes {
        	lang 'en-US'
        }
    }
    news "Configured ${s.name}"
}

register_services = { list ->
    list.each {
        register_service(it)
    }
}

register_service = { s ->
	def serviceTypeId = "service.type.${s.id.toLowerCase()}"

    serviceType {
		id serviceTypeId
		name s.name
		domain DOMAIN
		description s.name
		attributes 'service.meta.lang', 'service.meta.type'    
	}
	serviceInterfaceDefinition {
		name "${s.name} Interface"
		domain DOMAIN
		type serviceTypeId
		protocol 'SOAP_RPC_ENCODED'
		url "${s.url}?wsdl"
	}
	
	/*
	serviceMetaAttribute {
		id "${serviceTypeId}.lang"
		name 'Service language'
		domain DOMAIN
		//type SERVICE
		type serviceTypeId
		description 'The language(s) the service is able to process.'
	}

	serviceMetaAttribute {
		id "${serviceTypeId}.type"
		name 'Service type'
		domain DOMAIN
		type serviceTypeId
		description 'The type of service (POS tagger, sentence splitter, etc.)'
	}	
	*/
    service {
        id s.id
        name s.name
        url s.url
        protocol 'SOAP_RPC_ENCODED'
        domain DOMAIN
        type serviceTypeId
        copyright COPYRIGHT
        resource NONE_ID
        license s.license
        description s.desc
        allow 'commercial', 'nonprofit', 'research'
        control 'client', 'server'
        federate true
        attributes {
        	lang 'en-US'
        }
    }
    news "Configured ${s.name}"
}	

register_converter = { s ->
	def serviceTypeId = "service.type.${s.id.toLowerCase()}"

    serviceType {
		id serviceTypeId
		name s.name
		domain DOMAIN
		description s.name
		attributes 'service.meta.lang', 'service.meta.type'    
	}
	serviceInterfaceDefinition {
		name "${s.name} Interface"
		domain DOMAIN
		type serviceTypeId
		protocol 'SOAP_RPC_ENCODED'
		url "${s.url}?wsdl"
	}
	
    service {
        id s.id
        name s.name
        url s.url
        protocol 'SOAP_RPC_ENCODED'
        domain DOMAIN
        type serviceTypeId
        copyright COPYRIGHT
        resource NONE_ID
        license APACHE
        description s.desc
        allow 'commercial', 'nonprofit', 'research'
        control 'client', 'server'
        federate true
        attributes {
        	lang 'any'
        }
    }
    news "Registered ${s.name}"
}

/*
register_service = { svc ->
    service {
        id svc.id
        name svc.name
        url svc.url
        protocol 'SOAP_RPC_ENCODED'
        domain DOMAIN
        type SERVICE
        copyright COPYRIGHT
        resource NONE_ID
        license svc.license
        description svc.desc
        allow 'commercial', 'nonprofit', 'research'
        control 'client', 'server'
        federate true
        attributes {
        	lang 'en-US'
        }
    }
    news "Configured ${svc.name}"
}

register_converter = { converter ->
    service {
        id converter.id
        name converter.name
        url converter.url
        protocol 'SOAP_RPC_ENCODED'
        domain DOMAIN
        type SERVICE
        copyright COPYRIGHT
        resource NONE_ID
        license APACHE
        description converter.desc
        allow 'commercial', 'nonprofit', 'research'
        control 'client', 'server'
        federate true
        attributes {
        	lang 'any'
        }
    }
    news "Registered ${converter.name}"
}

*/